{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the documentation for MyPledge","text":"<p>Material is a design system created by Google to help teams build high-quality digital experiences for Android, iOS, Flutter, and the web. The biggest part of this product is built on Material 3 with some few components coming from Material design 2 and other design systems that will be noted over time in the documentation and refrenced.</p>"},{"location":"#principles","title":"Principles","text":"<ul> <li> <p>Bold, graphic, intentional The design is guided by print design methods \u2014 typography, grids, space, scale, color, and imagery \u2014 to create hierarchy, meaning, and focus that immerse viewers in the experience.</p> </li> <li> <p>Human The design is deeply committed to a high standard of accessibility, honesty, and respect for user attention.</p> </li> <li> <p>Focused The design is aims to deliver what is needed, when its needed and why its needed without necessarily destracting the user.</p> </li> <li> <p>Motion provides meaning Motion focuses attention and maintains continuity through subtle feedback and coherent transitions. As elements appear on screen, they transform and reorganize the environment with interactions generating new transformations.</p> </li> </ul>"},{"location":"#components","title":"Components","text":"<p>Material Components are interactive building blocks for creating a user interface, and include a built-in states system to communicate focus, selection, activation, error, hover, press, drag, and disabled states. Component libraries are available for Android, iOS, Flutter, and the web.</p>"},{"location":"#what-does-this-documentation-cover","title":"What does this documentation cover?","text":"<p>The documentation defines the qualities that can be expressed by UI regions, surfaces, and components. Design and strategize how your app is built using foundations that address design from both a broad and detailed perspective. </p> <ul> <li>User flows</li> <li>Design tokens</li> <li>Color</li> <li>Typography</li> <li>Iconography</li> <li>Dimensions</li> <li>Layout grids</li> <li>Border radius</li> <li>Elevation</li> <li>Motion</li> <li>Content/product tone</li> <li>Accessibility</li> </ul>"},{"location":"color/","title":"Color Documentation","text":"<p>As stated, we follow Material 3 (M3) and Material 2 (M2) color guidelines to ensure consistency and accessibility in the color system for the application.</p>"},{"location":"color/#overview","title":"Overview","text":"<p>The color system defines key palettes that create harmony across the app. It includes primary, secondary, and tertiary colors, alongside background, surface, and error colors.</p> <p>Colors give users context within their workflow and create a hierarchy of actions within the UI. Items in a selected or keyboard focus state are given visual importance since they relate to a user\u2019s immediate actions.</p>"},{"location":"color/#color-schemes","title":"Color Schemes","text":""},{"location":"color/#primary-colors","title":"Primary Colors","text":"<ul> <li>Primary (<code>#8a4a65</code>): Main color for branding.</li> <li>On Primary (<code>#ffffff</code>): Used for text/icons on primary color.</li> <li>Primary Container (<code>#ffd9e5</code>): Elevated surfaces using primary.</li> <li>On Primary Container (<code>#390721</code>): Text/icons on primary container.</li> </ul>"},{"location":"color/#secondary-colors","title":"Secondary Colors","text":"<ul> <li>Secondary (<code>#705d0d</code>): Complementary color for primary.</li> <li>On Secondary (<code>#ffffff</code>): Text/icons on secondary color.</li> <li>Secondary Container (<code>#fce186</code>): Surface container for secondary.</li> <li>On Secondary Container (<code>#231b00</code>): Text/icons on secondary container.</li> </ul>"},{"location":"color/#tertiary-colors","title":"Tertiary Colors","text":"<ul> <li>Tertiary (<code>#595892</code>): Alternative accent color.</li> <li>On Tertiary (<code>#ffffff</code>): Text/icons on tertiary color.</li> <li>Tertiary Container (<code>#e2dfff</code>): Surface container for tertiary.</li> <li>On Tertiary Container (<code>#15134a</code>): Text/icons on tertiary container.</li> </ul>"},{"location":"color/#demo","title":"Demo","text":""},{"location":"color/#color-picker","title":"Color picker","text":"Pick a Primary Color: Pick a Secondary Color:"},{"location":"color/#button-with-ripple-effect","title":"Button with Ripple Effect","text":"<p>   Click Me </p>"},{"location":"color/#card-component","title":"Card ComponentUpdate","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit.     Aenan convallis.           View Updates"},{"location":"color/#slider-component","title":"Slider Component","text":""},{"location":"color/#error-background-colors","title":"Error &amp; Background Colors","text":"<p>We use color to assign generic meanings to a subset of colors in order to set consistent expectations for users. These meanings are codified in design tokens and used throughout components.</p> <p>Semantics can be used in a variety of ways to communicate meaning. Semantic meanings include informative, accent, negative, notice, and positive. Use semantic colors to clearly and predictably communicate with a component\u2019s appearance. When using color with semantic meaning, you must also display text or an icon in order to ensure the meaning is not lost for users who are unable to see or differentiate colors.  - Error (<code>#ba1a1a</code>): Used for errors and warnings. - On Error (<code>#ffffff</code>): Text/icons on error color. - Error Container (<code>#ffdad6</code>): Surface for error alerts. - On Error Container (<code>#410002</code>): Text/icons on error container. - Background (<code>#fff8f8</code>): Main app background. - On Background (<code>#21191c</code>): Text/icons on background.</p>"},{"location":"color/#error","title":"Error","text":"<p>Use error roles to communicate error states, such as an incorrect password entered into a text field.</p> <p>There are four error roles: - Error \u2013 Attention-grabbing color against surface for fills, icons, and text, indicating urgency - On error \u2013 Text and icons against error - Error container \u2013 Attention-grabbing fill color against surface - On error container \u2013 Text and icons against error container</p> <p>Tip</p> <p>Error is an example of a static color (it doesn't change even in dynamic color schemes). Error color roles are made static by default with any dynamic color scheme.</p>"},{"location":"color/#material-3-adaptations","title":"Material 3 Adaptations","text":"<ul> <li>Uses Surface Containers (<code>Surface Container</code>, <code>Surface Container High</code>, <code>Surface Container Highest</code>) to provide depth.</li> <li>Primary, Secondary, and Tertiary Fixed colors for better adaptability.</li> <li>Surface Tint and Inverse Primary for advanced theming.</li> <li>Outline Variant provides an alternative for outlines in dark mode.</li> </ul>"},{"location":"color/#material-2-adaptations","title":"Material 2 Adaptations","text":"<ul> <li>Primary/Secondary color pairs remain consistent for light and dark themes.</li> <li>Uses Scrim (<code>#000000</code>) for overlays and modals.</li> <li>Adapts Typography Colors (<code>On Surface</code>, <code>On Surface Variant</code>) to maintain readability.</li> </ul>"},{"location":"color/#accessibility-considerations","title":"Accessibility Considerations","text":"<ul> <li>All foreground colors meet WCAG contrast ratio standards.</li> <li>Uses contrast pairs (e.g., <code>On Primary</code> and <code>Primary</code>) for text legibility.</li> <li>Error colors are distinguishable from other states to reduce confusion.</li> </ul> <p>Tip</p> <p>For further customization, refer to the Material Design color guidelines: Material 3 and Material 2.</p>"},{"location":"design-tokens/","title":"Design Tokens","text":""},{"location":"design-tokens/#introduction","title":"Introduction","text":"<p>Design tokens are small, reusable design decisions that make up a design system's visual style. Tokens replace static values with self-explanatory names.</p> <p>A design token consists of 2 things: * A code-like name, such as md.ref.palette.secondary90 * An associated value, such as #E8DEF8</p> <p>The token's value can be one of several things: A color, typeface, measurement, or even another token.</p> <p>Learn more</p> <p>To learn more about the tokens used in Material design 3, read here </p> Color SchemesTypographyShape SystemState LayersAOSP ThemeContent ThemeKit Components Name Font Family Weight Display Large Brand Regular Display Medium Brand Regular Display Small Brand Regular Headline Large Brand Regular Headline Medium Brand Regular Headline Small Brand Regular Title Large Brand Regular Title Medium Plain Medium Title Small Plain Medium Label Large Plain Medium Body Large Plain Regular Body Medium Plain Regular Body Small Plain Regular Corner Type Value None NaN Extra-small NaN Small NaN Medium NaN Large NaN Extra-large NaN Full NaN Name Color Code Primary <code>#006b5f</code> On Primary <code>#ffffff</code> On Primary Container <code>#00201c</code> Secondary Container <code>#cde8e1</code> Tertiary <code>#456179</code> On Surface <code>#171d1b</code> Surface Variant <code>#dae5e1</code> On Surface Variant <code>#3f4946</code> Outline <code>#6f7976</code> Outline Variant <code>#bec9c5</code> Scrim <code>#000000</code> Inverse On Surface <code>#ecf2ef</code> Surface Bright <code>#f4fbf8</code> Surface Container <code>#e9efec</code> Surface Container High <code>#e3eae7</code> Surface Container Highest <code>#dde4e1</code> Name Color Code Primary <code>#69567f</code> Primary Container <code>#e6cefe</code> Tertiary Container <code>#ffc8dc</code> On Tertiary Container <code>#5f3346</code> On Surface <code>#1d1b1e</code> On Surface Variant <code>#4a454d</code> Inverse On Surface <code>#f5eff3</code> On Primary Fixed <code>#241338</code> Component Name Color Code Component Container <code>#f7faf8</code> Variant Outline <code>#bec9c5</code> Camera <code>#2e2e2e</code>"},{"location":"design-tokens/#primary-colors","title":"Primary Colors","text":"Name Color Code Primary <code>#8a4a65</code> On Primary <code>#ffffff</code> Primary Container <code>#ffd9e5</code> On Primary Container <code>#390721</code>"},{"location":"design-tokens/#secondary-colors","title":"Secondary Colors","text":"Name Color Code Secondary <code>#705d0d</code> On Secondary <code>#ffffff</code> Secondary Container <code>#fce186</code> On Secondary Container <code>#231b00</code>"},{"location":"design-tokens/#tertiary-colors","title":"Tertiary Colors","text":"Name Color Code Tertiary <code>#595892</code> On Tertiary <code>#ffffff</code> Tertiary Container <code>#e2dfff</code> On Tertiary Container <code>#15134a</code>"},{"location":"design-tokens/#error-background-colors","title":"Error &amp; Background Colors","text":"Name Color Code Error <code>#ba1a1a</code> On Error <code>#ffffff</code> Error Container <code>#ffdad6</code> On Error Container <code>#410002</code> Background <code>#fff8f8</code> On Background <code>#21191c</code>"},{"location":"design-tokens/#primary-opacity","title":"Primary Opacity","text":"Opacity Level Color Code Opacity-08 <code>#65558f</code> Opacity-12 <code>#65558f</code> Opacity-16 <code>#65558f</code>"},{"location":"design-tokens/#on-primary-opacity","title":"On Primary Opacity","text":"Opacity Level Color Code Opacity-08 <code>#ffffff</code> Opacity-12 <code>#ffffff</code> Opacity-16 <code>#ffffff</code>"},{"location":"iconography/","title":"Iconography","text":""},{"location":"iconography/#overview","title":"Overview","text":"<p>Icons are a fundamental element of visual communication in user interfaces, providing clear and recognizable representations of actions, concepts, and navigation. In this design system, we standardize the use of Material Symbols by Google to ensure consistency, accessibility, and efficiency across all platforms.</p> <p>This document outlines the principles, usage guidelines, and implementation details for integrating icons effectively into the system.</p>"},{"location":"iconography/#principles","title":"Principles","text":"<p>Our approach to iconography is guided by the following principles:</p> <ul> <li>Clarity \u2013 Icons should convey meaning at a glance, reducing cognitive load.</li> <li>Consistency \u2013 A unified visual language ensures seamless user experiences across products.</li> <li>Scalability \u2013 Icons should be adaptable across different screen sizes and resolutions.</li> <li>Customizability \u2013 Icons should support modifications such as weight, fill, and size adjustments without losing their visual integrity.</li> <li>Accessibility \u2013 Icons must be perceivable by all users, including those using assistive technologies.</li> </ul>"},{"location":"iconography/#material-symbols","title":"Material Symbols","text":"<p>We leverage Material Symbols, a highly flexible and comprehensive icon set designed by Google, which aligns with Material Design 3 guidelines.  </p>"},{"location":"iconography/#why-material-symbols","title":"Why Material Symbols?","text":"<ul> <li>Extensive Library \u2013 Covers a broad range of use cases.</li> <li>Dynamic Customization \u2013 Supports variations in weight, fill, grade, and optical size.</li> <li>Performance-Optimized \u2013 Designed for modern UI frameworks with minimal impact on load times.</li> <li>Cross-Platform Compatibility \u2013 Works seamlessly across web, mobile, and desktop environments.</li> </ul>"},{"location":"iconography/#implementation-in-react-native","title":"Implementation in React Native","text":"<p>For React Native projects, we use <code>react-native-vector-icons</code> with Material Symbols.</p>"},{"location":"iconography/#installation","title":"Installation","text":"<p>If using Expo, Material Symbols are included by default. Otherwise, install them manually:</p> <pre><code>npm install react-native-vector-icons\nreact-native link react-native-vector-icons\n</code></pre> <p>For projects using Expo, install the dedicated package:</p> <pre><code>npm install @expo/vector-icons\n</code></pre>"},{"location":"iconography/#usage-example","title":"Usage Example","text":"<p>To integrate Material Symbols into a React Native application:</p> <pre><code>import { MaterialIcons } from \"@expo/vector-icons\";\nimport { View, Text } from \"react-native\";\n\nexport default function IconExample() {\n  return (\n    &lt;View&gt;\n      &lt;MaterialIcons name=\"home\" size={32} color=\"black\" /&gt;\n      &lt;Text&gt;Home&lt;/Text&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre>"},{"location":"iconography/#customization-options","title":"Customization Options","text":"<p>Material Symbols allow fine-tuned control over appearance:</p> <pre><code>&lt;MaterialIcons name=\"favorite\" size={40} color=\"red\" /&gt;\n&lt;MaterialIcons name=\"settings\" size={30} color=\"gray\" /&gt;\n</code></pre> <p>Info</p> <p>For the full icon library, refer to the official Material Symbols Library.</p>"},{"location":"iconography/#styling-and-customization","title":"Styling and Customization","text":"<p>Material Symbols support variable font properties, allowing developers to adjust icon appearance dynamically:</p> <pre><code>.material-symbols-outlined {\n  font-variation-settings: 'FILL' 1, 'wght' 400, 'GRAD' 0, 'opsz' 48;\n}\n</code></pre> Property Description Values <code>FILL</code> Icon fill style <code>0</code> (outline), <code>1</code> (filled) <code>wght</code> Weight (thickness) <code>100 - 700</code> <code>GRAD</code> Grade (fine-tuning of weight) <code>-25 - 200</code> <code>opsz</code> Optical size <code>20 - 48</code> <p>These properties allow greater control over how icons adapt to different UI contexts.</p>"},{"location":"iconography/#best-practices","title":"Best Practices","text":"<p>\u2714 Use icons to enhance, not replace text \u2013 Icons should complement labels rather than stand alone in ambiguous contexts. \u2714 Ensure accessibility \u2013 Always include proper aria-labels or alternative text for screen readers. \u2714 Maintain a consistent visual hierarchy \u2013 Icon sizes and styles should align with the typography and UI structure. \u2714 Avoid unnecessary complexity \u2013 Stick to the predefined icon set to reduce cognitive overload.  </p>"},{"location":"typography/","title":"Typography Documentation","text":"<p>Typography is an important part of a design system that brings consistency across experiences and platforms. Good typography rules help present content clearly and efficiently.</p>"},{"location":"typography/#introduction","title":"Introduction","text":"<p>We use Roboto as the main font for both Android as iOS. It can be downoaded via Google fonts here. Material Design defines a type scale that maintains consistency across different screen sizes and platforms.</p>"},{"location":"typography/#principles","title":"Principles","text":"<ul> <li>Clarity: Text should be legible and accessible across all devices.</li> <li>Consistency: A unified type system ensures harmonious UI.</li> <li>Adaptability: Type scales adjust to different screen sizes.</li> <li>Expressiveness: Typography should align with a brand\u2019s personality.</li> </ul>"},{"location":"typography/#type-scale","title":"Type ScaleType Scale Generator","text":"<p>Use the interactive type scale generator below to create typography settings for Flutter or React Native, while ensuring compatibility with Material 3 tokens.</p> Scale Category Typeface Weight Size Case Letter Spacing Flutter <pre><code>const TextStyle h1 = TextStyle(\n  fontFamily: 'Roboto',\n  fontWeight: FontWeight.w300,\n  fontSize: 96,\n  letterSpacing: -1.5,\n);\n\nconst TextStyle h2 = TextStyle(\n  fontFamily: 'Roboto',\n  fontWeight: FontWeight.w300,\n  fontSize: 60,\n  letterSpacing: -0.5,\n);\n\nconst TextStyle h3 = TextStyle(\n  fontFamily: 'Roboto',\n  fontWeight: FontWeight.w400,\n  fontSize: 48,\n  letterSpacing: 0,\n);\n</code></pre> React Native <pre><code>const typography = {\n  h1: { fontFamily: \"Roboto\", fontSize: 96, fontWeight: \"300\", letterSpacing: -1.5 },\n  h2: { fontFamily: \"Roboto\", fontSize: 60, fontWeight: \"300\", letterSpacing: -0.5 },\n  h3: { fontFamily: \"Roboto\", fontSize: 48, fontWeight: \"400\", letterSpacing: 0 },\n};\n</code></pre>"},{"location":"typography/#letter-spacing-units-android-ios","title":"Letter Spacing Units (Android &amp; iOS)","text":""},{"location":"typography/#android-dp-sp","title":"Android (dp &amp; sp)","text":"<ul> <li>Uses sp (scale-independent pixels) for text size.</li> <li>Uses dp (density-independent pixels) for spacing.</li> </ul>"},{"location":"typography/#ios-points-ems","title":"iOS (points &amp; ems)","text":"<ul> <li>Uses points for font sizes.</li> <li>Uses ems for letter spacing.</li> </ul>"},{"location":"typography/#applying-the-type-scale","title":"Applying the Type Scale","text":"<p>Our text is classified into various categories based on function and hierarchy:</p>"},{"location":"typography/#headlines","title":"Headlines","text":"<ul> <li>Large, bold text for primary content.</li> <li> <p>Example:</p> <pre><code>font-size: 32px;\nfont-weight: 700;\nline-height: 40px;\n</code></pre> </li> </ul>"},{"location":"typography/#subtitles","title":"Subtitles","text":"<ul> <li>Used for secondary information or section titles.</li> <li> <p>Example:</p> <pre><code>font-size: 18px;\nfont-weight: 500;\nline-height: 24px;\n</code></pre> </li> </ul>"},{"location":"typography/#body","title":"Body","text":"<ul> <li>Standard content text used across UI.</li> <li> <p>Example:</p> <pre><code>font-size: 16px;\nfont-weight: 400;\nline-height: 22px;\n</code></pre> </li> </ul>"},{"location":"typography/#caption-overline","title":"Caption &amp; Overline","text":"<ul> <li>Used for small supporting text.</li> <li> <p>Example:</p> <pre><code>font-size: 12px;\nfont-weight: 400;\nline-height: 16px;\ntext-transform: uppercase;\n</code></pre> </li> </ul>"},{"location":"typography/#dev-tools","title":"Dev tools","text":"<p>Here are some tools to simplify typography management: - Material Theme Builder - Interactive typography customization. - Google Fonts - Access and integrate Material Design fonts. - React Native Paper - Typography tokens for React Native. - Flutter Material Typography - Documentation for Flutter typography.</p>"},{"location":"user-flows/","title":"MyPledge User Flows","text":"<p>This page documents the various user flows in the MyPledge app. Each flow is represented as a flowchart, and important notes are provided using admonitions.</p>"},{"location":"user-flows/#table-of-contents","title":"Table of Contents","text":"<ul> <li>User Setup Related Flows</li> <li>Guest Flow</li> <li>Sign Up Flow</li> <li>Log In Flow</li> <li>Reset Password Flow</li> <li>Returning User Flow</li> <li>Homescreen Related Flows</li> <li>Goals Flows</li> <li>Saving Plans Flows</li> <li>Profile Flows</li> </ul>"},{"location":"user-flows/#user-setup-related-flows","title":"User Setup Related Flows","text":""},{"location":"user-flows/#introduction","title":"Introduction","text":"<p>A new user is greeted by both the Launch Screen and the Splash Screen. The splash screen displays three buttons: - Log In - Register - Continue as Guest</p> <p>Each button leads to a different flow. Below are the detailed flows.</p>"},{"location":"user-flows/#guest-flow","title":"Guest Flow","text":"<pre><code>flowchart LR\n    A([\"Splash Screen\"]) --&gt; B([\"Onboarding Carousel (9 Items)\"])\n    B --&gt; C([\"Partners &amp; Sponsors Screen\"])\n    C --&gt; D([\"Tap Skip Button\"])\n    D --&gt; A</code></pre> <p>Note</p> <p>The individual list components holding the sponsors, when tapped, link to external websites of these sponsors.</p>"},{"location":"user-flows/#sign-up-flow","title":"Sign Up Flow","text":"<pre><code>flowchart TD\n    A([\"Splash Screen\"]) --&gt; B([\"Tap 'Register'\"])\n    B --&gt; C([\"Sign Up Screen\"])\n    C --&gt; D([\"Create Password Screen\"])\n    D --&gt; E([\"Account Created Successfully\"])\n    E --&gt; F([\"Enable Passkeys\"])\n    F -- \"Tap Enable\" --&gt; G([\"Passkey Setup Process\"])\n    F -- \"Tap Skip\" --&gt; H([\"Onboarding Carousel\"])\n    H --&gt; I([\"Sponsors Screen\"])</code></pre> <p>Note</p> <p>The onboarding carousel is scrollable by the user (swipe left/right) instead of only using buttons.</p>"},{"location":"user-flows/#adding-earning-frequency-post-sign-up","title":"Adding Earning Frequency (Post Sign-Up)","text":"<p>At the end of the onboarding carousel in the sign up flow, users are directed to add their earning frequency.</p> <pre><code>flowchart TD\n    A([\"Sponsors Screen\"])\n    A --&gt; B([\"How Often Do You Save?\"])\n    B --&gt; C([\"Tap Continue\"])\n    C --&gt; D([\"How Much Do You Earn per Selected Option\"])\n    D --&gt; E([\"Homescreen\"])</code></pre>"},{"location":"user-flows/#log-in-flow","title":"Log In Flow","text":"<pre><code>flowchart LR\n    A([\"Splash Screen\"])\n    A --&gt; B([\"Tap 'Log In'\"])\n    B --&gt; C([\"Log In Screen\"])\n    C --&gt; D([\"Enter Credentials\"])\n    D --&gt; E([\"Log In Successful\"])\n    E --&gt; F([\"Homescreen\"])</code></pre>"},{"location":"user-flows/#reset-password-flow","title":"Reset Password Flow","text":"<pre><code>flowchart TD\n    A([\"Log In Screen\"])\n    A --&gt; B([\"Tap 'Forgot Password'\"])\n    B --&gt; C([\"Reset Password Request Screen\"])\n    C --&gt; D([\"Submit Email/Phone\"])\n    D --&gt; E([\"Reset Link/OTP Sent\"])\n    E --&gt; F([\"Reset Password Screen\"])\n    F --&gt; G([\"Password Reset Successful\"])\n    G --&gt; H([\"Log In Screen\"])</code></pre>"},{"location":"user-flows/#returning-user-flow","title":"Returning User Flow","text":"<pre><code>flowchart LR\n    A([\"Splash Screen\"])\n    A --&gt; B([\"Tap 'Returning User'\"])\n    B --&gt; C([\"Log In Screen\"])\n    C --&gt; D([\"Enter Credentials\"])\n    D --&gt; E([\"Log In Successful\"])\n    E --&gt; F([\"Homescreen\"])</code></pre>"},{"location":"user-flows/#homescreen-related-flows","title":"Homescreen Related Flows","text":"<p>Documentation coming soon\u2026</p>"},{"location":"user-flows/#goals-flows","title":"Goals Flows","text":"<p>Documentation coming soon\u2026</p>"},{"location":"user-flows/#saving-plans-flows","title":"Saving Plans Flows","text":"<p>Documentation coming soon\u2026</p>"},{"location":"user-flows/#profile-flows","title":"Profile Flows","text":"<p>Documentation coming soon\u2026</p>"}]}